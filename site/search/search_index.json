{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HCL SoFy Quick HCL SoFy Introduction Welcome to HCL SoFy (short for \u201cSolution Factory\u201d), the easy way to get started deploying HCL Software products to Kubernetes. Use SoFy to install and configure your HCL Software products in Kubernetes within minutes through our application of cloud-centric technologies and practices. These include the following: running in docker containers, creating stand-alone and individually scalable services, enabling cloud scaling and orchestration, continuous delivery of updates, and opening capabilities with new REST APIs. HCL SoFy amplifies the integration of world-class HCL Software Products, Modules, and Demos to generate a customized solution quickly and easily in just three simple steps: Explore the Catalog, Create a Solution, and Release to the Cloud. Step 1: Explore the Catalog HCL SoFy is a catalog of ready-to-use HCL Software Products, Modules, and Demos with built-in tools for easy deployment to a cloud native environment of your choice. SoFy uses Helm technology to provide HCL Products as cloud-ready building blocks. All HCL SoFy software is enabled for Kubernetes as docker images and Helm charts. To view the entire catalog, select Catalog on the header menu. Click on a card to learn more about the service. The catalog details page shows important information and documentation for using that product or service. Search the catalog by typing keywords in the Search Box or by using the filters. Step 2: Create a Solution Creating a solution can be quick and easy. From the catalog page: Select one or more products, modules, or demos from the catalog. Click ADD TO SOLUTION . Note: If you add a demo, it will automatically add the coordinating product(s) to the solution. The Solution Panel will pop up on the bottom of the page. Give your solution a name, version, and a description and click CREATE . Note: You can expand the Solution Panel for a more detailed view where you can select or deselect SoFy Common Services. Once your solution is created, you will be taken to the Solution Details page, where you can view the contents of your solution and download the .tgz file. Note: You have the option to use our in-house sandbox to preview your solution. Step 3: Release to the Cloud HCL SoFy is designed to allow solutions to deploy to any Kubernetes environment, giving you several options: open source Kubernetes for a self-managed environment, public cloud vendors like Google Kubernetes Engine or Amazon Elastic Kubernetes Service, or private cloud platforms that include Kubernetes capability within their data center or cloud account. After creating your solution with the items of your choice, you can preview it our sandbox or use it locally in the cloud of your choice. SoFy also offers a hosting integration with our managed cloud environment application, HCL Now. You can either preview in our sandbox, download it in your environment of choice, or request HCL Now hosting services. To preview your solution in the sandbox, click DEPLOY . Once deployed to the sandbox, you can view your solution in the Solution Console. Click VIEW SOLUTION CONSOLE . Detailed information for installing Solutions can be found in the following SoFy Guides: Installing Solutions: Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial Installing Solutions: Overview for Kubernetes Administrators Installing Solutions: Step-by-Step Instructions Applying your Own Domain Name and SSL Cert Supported Kubernetes Environments While SoFy does provide a sandbox (Kubernetes cluster) for limited testing of solutions, it is not a deployment platform. You can read more in the SoFy Guide entitled Supported Kubernetes Environments . Note So far, solutions have been tested in GCP and AWS only.","title":"Welcome"},{"location":"#welcome-to-hcl-sofy","text":"","title":"Welcome to HCL SoFy"},{"location":"#quick-hcl-sofy-introduction","text":"Welcome to HCL SoFy (short for \u201cSolution Factory\u201d), the easy way to get started deploying HCL Software products to Kubernetes. Use SoFy to install and configure your HCL Software products in Kubernetes within minutes through our application of cloud-centric technologies and practices. These include the following: running in docker containers, creating stand-alone and individually scalable services, enabling cloud scaling and orchestration, continuous delivery of updates, and opening capabilities with new REST APIs. HCL SoFy amplifies the integration of world-class HCL Software Products, Modules, and Demos to generate a customized solution quickly and easily in just three simple steps: Explore the Catalog, Create a Solution, and Release to the Cloud.","title":"Quick HCL SoFy Introduction"},{"location":"#step-1-explore-the-catalog","text":"HCL SoFy is a catalog of ready-to-use HCL Software Products, Modules, and Demos with built-in tools for easy deployment to a cloud native environment of your choice. SoFy uses Helm technology to provide HCL Products as cloud-ready building blocks. All HCL SoFy software is enabled for Kubernetes as docker images and Helm charts. To view the entire catalog, select Catalog on the header menu. Click on a card to learn more about the service. The catalog details page shows important information and documentation for using that product or service. Search the catalog by typing keywords in the Search Box or by using the filters.","title":"Step 1: Explore the Catalog"},{"location":"#step-2-create-a-solution","text":"Creating a solution can be quick and easy. From the catalog page: Select one or more products, modules, or demos from the catalog. Click ADD TO SOLUTION . Note: If you add a demo, it will automatically add the coordinating product(s) to the solution. The Solution Panel will pop up on the bottom of the page. Give your solution a name, version, and a description and click CREATE . Note: You can expand the Solution Panel for a more detailed view where you can select or deselect SoFy Common Services. Once your solution is created, you will be taken to the Solution Details page, where you can view the contents of your solution and download the .tgz file. Note: You have the option to use our in-house sandbox to preview your solution.","title":"Step 2: Create a Solution"},{"location":"#step-3-release-to-the-cloud","text":"HCL SoFy is designed to allow solutions to deploy to any Kubernetes environment, giving you several options: open source Kubernetes for a self-managed environment, public cloud vendors like Google Kubernetes Engine or Amazon Elastic Kubernetes Service, or private cloud platforms that include Kubernetes capability within their data center or cloud account. After creating your solution with the items of your choice, you can preview it our sandbox or use it locally in the cloud of your choice. SoFy also offers a hosting integration with our managed cloud environment application, HCL Now. You can either preview in our sandbox, download it in your environment of choice, or request HCL Now hosting services. To preview your solution in the sandbox, click DEPLOY . Once deployed to the sandbox, you can view your solution in the Solution Console. Click VIEW SOLUTION CONSOLE . Detailed information for installing Solutions can be found in the following SoFy Guides: Installing Solutions: Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial Installing Solutions: Overview for Kubernetes Administrators Installing Solutions: Step-by-Step Instructions Applying your Own Domain Name and SSL Cert Supported Kubernetes Environments While SoFy does provide a sandbox (Kubernetes cluster) for limited testing of solutions, it is not a deployment platform. You can read more in the SoFy Guide entitled Supported Kubernetes Environments . Note So far, solutions have been tested in GCP and AWS only.","title":"Step 3: Release to the Cloud"},{"location":"about/","text":"This is the future home of HCL SoFy documentation. You can find the source code for this site at GitHub: https://github.com/HCL-TECH-SOFTWARE/sofy-docs","title":"About"},{"location":"topics/Installing%20Solutions/","text":"Installing Solutions","title":"Installing Solutions"},{"location":"topics/Installing%20Solutions/#installing-solutions","text":"","title":"Installing Solutions"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/","text":"Installing Solutions Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial These instructions are designed for those new to Kubernetes, and have simplified steps to: * Create a trial account in Google Cloud Platform (GCP) * Create a Kubernetes cluster using Google Kubernetes Environment (GKE), in the GCP Trial Account * Prepare the cluster for install of a SoFy Solution * Install and access the SoFy Solution in the cluster You can install more than one solution in a cluster, if there are sufficient resources, but each solution must be installed in a separate namespace. The steps shown below will install a solution into the cluster's default namespace. To repeat the installation with additional solutions, rerun the setup and specify a different namespace, then install the solution into the new namespace. You will need the following to get started: * A valid credit card (Google states that you will not be charged for the trial account) * A Solution chart downloaded from SoFy to your local file system; on the Solution detail page, there is a download icon near the top right-hand corner * Details of the FlexNet license server that contain your entitlements to run the HCL Software included in your solution; alternatively, you can install a solution without these values, and add them later through the Solution Console Settings , but some of the software may not be fully functional until that is done * Your CLI secret for the HCL docker registry; instructions to obtain your CLI secret will be provided further down the documentation when it is needed Note: If you already have a GCP Account, skip to section II. I. Create a GCP Trial Account Create a Gmail account (unless you want to use an existing account): Signup for a new Gmail account Create a Google GCP Trial Account: https://cloud.google.com/gcp/ Click the Get started for free button Enter the email of existing account or account created earlier Note: You will be asked to provide credit card information. Google states that it will not be charged unless you explicitly upgrade from the free trial to a paid account. II. Sign-In to GCP, Create a Top-Level Project and a New Kubernetes Cluster Login here to the GCP console using your account information Once logged in, you should land in the Kubernetes Engine > Cluster view You will be prompted to create a project Select Create Project to build your top-level GCP project No organization is required Select Create Cluster On the left-hand side, click on Cluster basics Name your cluster Use Zonal clusters with the default version of GKE Note: Initially we\u2019d recommend using the static version (requires manual updates) and not the release channel. Next, on the left-hand side, click on Node Pools then select default-pool By default, the node pool will have 3 nodes - we recommend to modify this to 2 nodes. Select size number of nodes: 2 Next, size you nodes according to your solution; select Nodes within the default-pool The Solution Details page includes estimated resource needs for the solution Select Machine Type For example, for a solution that requires 6 vCPU and 13 GB memory, you could select e2-standard-4 (2 nodes of 4 vCPU, 16 GB memory) Click Create - your cluster should take around 3-5 minutes to be ready III. Connect to your Cluster Using Google Cloud Shell In the Kubernetes Clusters view, click Connect next to your newly created cluster Select the button to Run in Cloud Shell After accepting a one-time prompt, the shell will be launched with your first command \u201cgcloud container\u2026\u201d pre-typed Click Enter to execute this command which connects kubectl to your cluster Verify you are connected to your cluster with the following command that should show more than a dozen pods already running in in the kube-system namespace in your cluster: kubectl get pods --all-namespaces 5. The minimum version of Helm for HCL SoFy is documented in Supported Kubernetes Versions / Cluster Requirements and Limitations . To install a supported version of Helm, please run the following command: wget https://hclcr.io/files/sofy/scripts/get-helm3.sh && source get-helm3.sh IV. Prepare the Cluster for Running SoFy Solutions This step will install Cert-Manager in the cluster, and create an 'image pull secret' in the namespace that allows access to the docker registry where the HCL images are held. Use this command in your google cloud shell to download and run the setup script: wget https://hclcr.io/files/sofy/scripts/gcp-trial-setup-harbor.sh && source gcp-trial-setup-harbor.sh You will be prompted to enter your username and CLI secret. To obtain this, follow the steps below: Log into https://hclcr.io with the LOGIN VIA OIDC PROVIDER button using your HCL/SoFy ID credentials; if you need to create a username in the registry, it is recommended that you use your email address In the top right corner, click on the dropdown for your username to get to your \u201cUser Profile\u201d From your User Profile you can copy the pre-generated CLI secret, or you can enter a secret of your choice; we recommend you enter a string that you will remember, to avoid returning to the registry each time you need the CLI secret Note: This script does take a few minutes and has a bit of a pause when installing Cert-Manager V. Install a SoFy Solution Once the above steps have been completed, all the required prerequisites will be installed. Now you are ready to install a SoFy Solution. Note: In the commands below, the --namespace flag is only required if you are not using the default namespace; it is included here to help if you use a non-default namespace. Upload your solution chart to the Cloud Shell. From the three-dot menu, click Upload File and navigate to the chart in your local file system Note: Upload File does not overwrite existing files in your cloud shell filesystem, so if you modify your solution and upload a new copy, be sure to delete the old file first. You can use the 'ls' command to list files and 'rm filename ' to delete a file. Install your solution as follows: A Helm install requires a release-name, which you can choose. If you don\u2019t specify one you must include the --generate-name flag: helm install {release-name} {solution file name} --set hclFlexnetURL={flexnet-url},hclFlexnetID={flexnet-id} --namespace default Note: For this example, we will install a solution using the release name 'my-dx' in the default namespace: helm install my-dx my-solution-0.1.0.tgz --set hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com,hclFlexnetID=ABC54HDG67WS --namespace default To configure the hclFlexnetURL and hclFlexnetID value overrides, you will need to specify your own license server information. For more information about these fields see How to Connect a Solution to a Flexet License Server . If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings . Additional value overrides can be added to the Helm install command as needed (for example if you have used a non-default name for the image pull secret): | Override | Command Line Argument | |---|---| | Custom ImagePullSecret name | --set global.sofyImagePullSecret={secret-name} | |Any other value overrides | --set {name}={value} | Now you can use kubectl or Helm commands to manage your deployed solution generated by SoFy. Monitor your solution pods to determine when the installation has completed and the pods are ready. kubectl get pods --namespace default The solution will be ready to access when all pods are in Running or Completed state, and the Running pods are all READY . For example, the output should be similar to this, where the READY column indicates when the running pods are ready to use. Pods that have completed are used to initialize other services and will not be in ready state: NAME READY STATUS RESTARTS AGE gcp1-access-control-service-5759f5fdbd-srd4j 1/1 Running 0 74m gcp1-acs-kc-postgresql-0 1/1 Running 0 74m gcp1-alexgcp1-kube-state-metrics-6d775b968b-kksjj 1/1 Running 0 74m gcp1-ambassador-88b456cbd-l7vph 1/1 Running 0 74m gcp1-ambassador-88b456cbd-lj94l 1/1 Running 0 74m gcp1-ambassador-88b456cbd-z2g6f 1/1 Running 0 74m gcp1-anchor-657c5c5569-zq5c7 1/1 Running 0 74m gcp1-grafana-769b8f7bb4-cck27 2/2 Running 0 74m gcp1-grafana-job-jxjqw 0/1 Completed 1 74m gcp1-keycloak-0 1/1 Running 0 74m gcp1-openldap-5f5866945b-ng6ft 1/1 Running 0 74m gcp1-product-design-mongo-bdf84fb6f-fdv62 1/1 Running 0 74m gcp1-product-design-redis-master-0 1/1 Running 0 74m gcp1-product-designer-client-5dc979df4f-2bwqk 1/1 Running 0 74m gcp1-product-designer-server-7f5b59f4f4-bfllh 1/1 Running 0 74m gcp1-product-runtime-c4d66cc54-qjhqf 1/1 Running 1 74m gcp1-prometheus-server-757bd5c746-fq7t4 2/2 Running 0 74m gcp1-snoop-788f87594f-mkvz4 1/1 Running 0 74m gcp1-sofy-console-d66cf776c-494xc 1/1 Running 0 74m gcp1-solution-controller-7c8bcfd59f-cktvq 1/1 Running 0 74m If you see pods with a status of ErrImagePull or ImagePullBackOff, check that you are installing to the correct namespace. If the pods seem to remain in Pending status for a long time, there may not be sufficient resources in the cluster. You can use the GCP dashboard to examine cluster resources, or run this command to query a specific pod: kubectl describe pods {pod name} --namespace default The last line of the output gives a useful diagnosis of the problem, for example: Warning FailedScheduling 40s (x24 over 28m) default-scheduler 0/2 nodes are available: 2 Insufficient memory. Once the pods are ready, find the external IP for the solution, which will be assigned to the ambassador service: kubectl get svc {release-name}-ambassador --namespace default The output should be similar to this: ``` NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gcpprod-ambassador LoadBalancer 10.48.1.192 35.226.228.226 80:31299/TCP,443:31379/TCP,2222:30537/TCP,31116:32031/TCP,3030:31394/TCP,3031:31525/TCP,3032:31565/TCP,3033:3 0959/TCP,3034:32123/TCP,3035:31855/TCP,3036:30515/TCP,3037:31103/TCP,3038:32227/TCP,3039:31334/TCP,3040:32044/TCP,3041:32125/TCP,3042:30903/TCP,3043:31559/TCP 17m ``` The external IP in the above example is 35.226.228.226. Enter the EXTERNAL-IP into this link to access the Solution Console app in your browser: https://sofy-console.EXTERNAL-IP.nip.io/. You will see some warnings about the certificate used in the solution; it is safe to accept these and proceed to the Solution Console application. Log in to the application with the default User ID (userid) and password: sol-admin and pass . The Solution Console provides information about all parts of the solution, as well as links to the home pages of the included products and services. When you are finished with your solution, you can uninstall it with this command: helm delete {release-name} --namespace default Be aware that the trial credit in your account will be used for resources assigned to the cluster, even if there is nothing running in it. If you don't plan to use your cluster for a while, you may consider deleting it and then recreating when you need it again. VI. Security of your GCP Cluster GKE is not secure by default. Any resources with an External IP in your new cluster will be accessible. There are a few important things you should do to lock down your cluster: Create Master Authorized Network for Your Cluster 1. Navigate to Kubernetes Engine > Clusters 2. Edit your cluster and set Master authorized networks to Enabled . This will ensure that your cluster API can only be accessed by GCP (in your Cloud Shell). If you want to use a local kubectl to connect to your cluster, you can add your own IP address as well (e.g 1.2.3.4/32) Create a Firewall Rule for your Cluster 1. Navigate to your GCP account Firewall rules page 2. Lock down your Firewall rules and stay on top of them * GCP creates some wide open firewall rules allowing ssh and other protocols to your GCP resources. The allowed client IP addresses are set to \u201c0.0.0.0/0\u201d which effectively means open to the internet. We will show you how to delete those below * Also when deploying \u201cLoadBalancer\u201d services in GKE, you will get a public IP address for the service and firewall rules will be automatically created letting the internet get to the service\u2019s exposed ports. To address this: * First create a firewall rule to allow your IP address to access everything: * VPC network > Firewall rules > Create Firewall Rule : * Name: let-me-in (or whatever name you like) * Targets: All instances in the network * Source IP Ranges: {your IP}/32. For example 1.2.3.4/32 * Protocols and Ports: \u201cAllow all\u201d 3. Regularly review your Firewall rules and delete any that have 0.0.0.0/0 in the IP Range. Here is a one-liner that will do that: ``` gcloud compute firewall-rules list --format=\"table(name,sourceRanges.list():label=SRC_RANGES)\" |grep \"0.0.0.0/0\" | grep -Eo '^[^ ]+' | while read line; do gcloud compute firewall-rules delete $line; done ```","title":"Quick Start - GCP Trial"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#installing-solutions-getting-started-with-solutions-in-a-google-cloud-platform-trial-account-tutorial","text":"These instructions are designed for those new to Kubernetes, and have simplified steps to: * Create a trial account in Google Cloud Platform (GCP) * Create a Kubernetes cluster using Google Kubernetes Environment (GKE), in the GCP Trial Account * Prepare the cluster for install of a SoFy Solution * Install and access the SoFy Solution in the cluster You can install more than one solution in a cluster, if there are sufficient resources, but each solution must be installed in a separate namespace. The steps shown below will install a solution into the cluster's default namespace. To repeat the installation with additional solutions, rerun the setup and specify a different namespace, then install the solution into the new namespace. You will need the following to get started: * A valid credit card (Google states that you will not be charged for the trial account) * A Solution chart downloaded from SoFy to your local file system; on the Solution detail page, there is a download icon near the top right-hand corner * Details of the FlexNet license server that contain your entitlements to run the HCL Software included in your solution; alternatively, you can install a solution without these values, and add them later through the Solution Console Settings , but some of the software may not be fully functional until that is done * Your CLI secret for the HCL docker registry; instructions to obtain your CLI secret will be provided further down the documentation when it is needed Note: If you already have a GCP Account, skip to section II.","title":"Installing Solutions Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#i-create-a-gcp-trial-account","text":"Create a Gmail account (unless you want to use an existing account): Signup for a new Gmail account Create a Google GCP Trial Account: https://cloud.google.com/gcp/ Click the Get started for free button Enter the email of existing account or account created earlier Note: You will be asked to provide credit card information. Google states that it will not be charged unless you explicitly upgrade from the free trial to a paid account.","title":"I. Create a GCP Trial Account"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#ii-sign-in-to-gcp-create-a-top-level-project-and-a-new-kubernetes-cluster","text":"Login here to the GCP console using your account information Once logged in, you should land in the Kubernetes Engine > Cluster view You will be prompted to create a project Select Create Project to build your top-level GCP project No organization is required Select Create Cluster On the left-hand side, click on Cluster basics Name your cluster Use Zonal clusters with the default version of GKE Note: Initially we\u2019d recommend using the static version (requires manual updates) and not the release channel. Next, on the left-hand side, click on Node Pools then select default-pool By default, the node pool will have 3 nodes - we recommend to modify this to 2 nodes. Select size number of nodes: 2 Next, size you nodes according to your solution; select Nodes within the default-pool The Solution Details page includes estimated resource needs for the solution Select Machine Type For example, for a solution that requires 6 vCPU and 13 GB memory, you could select e2-standard-4 (2 nodes of 4 vCPU, 16 GB memory) Click Create - your cluster should take around 3-5 minutes to be ready","title":"II. Sign-In to GCP, Create a Top-Level Project and a New Kubernetes Cluster"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#iii-connect-to-your-cluster-using-google-cloud-shell","text":"In the Kubernetes Clusters view, click Connect next to your newly created cluster Select the button to Run in Cloud Shell After accepting a one-time prompt, the shell will be launched with your first command \u201cgcloud container\u2026\u201d pre-typed Click Enter to execute this command which connects kubectl to your cluster Verify you are connected to your cluster with the following command that should show more than a dozen pods already running in in the kube-system namespace in your cluster: kubectl get pods --all-namespaces 5. The minimum version of Helm for HCL SoFy is documented in Supported Kubernetes Versions / Cluster Requirements and Limitations . To install a supported version of Helm, please run the following command: wget https://hclcr.io/files/sofy/scripts/get-helm3.sh && source get-helm3.sh","title":"III. Connect to your Cluster Using Google Cloud Shell"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#iv-prepare-the-cluster-for-running-sofy-solutions","text":"This step will install Cert-Manager in the cluster, and create an 'image pull secret' in the namespace that allows access to the docker registry where the HCL images are held. Use this command in your google cloud shell to download and run the setup script: wget https://hclcr.io/files/sofy/scripts/gcp-trial-setup-harbor.sh && source gcp-trial-setup-harbor.sh You will be prompted to enter your username and CLI secret. To obtain this, follow the steps below: Log into https://hclcr.io with the LOGIN VIA OIDC PROVIDER button using your HCL/SoFy ID credentials; if you need to create a username in the registry, it is recommended that you use your email address In the top right corner, click on the dropdown for your username to get to your \u201cUser Profile\u201d From your User Profile you can copy the pre-generated CLI secret, or you can enter a secret of your choice; we recommend you enter a string that you will remember, to avoid returning to the registry each time you need the CLI secret Note: This script does take a few minutes and has a bit of a pause when installing Cert-Manager","title":"IV. Prepare the Cluster for Running SoFy Solutions"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#v-install-a-sofy-solution","text":"Once the above steps have been completed, all the required prerequisites will be installed. Now you are ready to install a SoFy Solution. Note: In the commands below, the --namespace flag is only required if you are not using the default namespace; it is included here to help if you use a non-default namespace. Upload your solution chart to the Cloud Shell. From the three-dot menu, click Upload File and navigate to the chart in your local file system Note: Upload File does not overwrite existing files in your cloud shell filesystem, so if you modify your solution and upload a new copy, be sure to delete the old file first. You can use the 'ls' command to list files and 'rm filename ' to delete a file. Install your solution as follows: A Helm install requires a release-name, which you can choose. If you don\u2019t specify one you must include the --generate-name flag: helm install {release-name} {solution file name} --set hclFlexnetURL={flexnet-url},hclFlexnetID={flexnet-id} --namespace default Note: For this example, we will install a solution using the release name 'my-dx' in the default namespace: helm install my-dx my-solution-0.1.0.tgz --set hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com,hclFlexnetID=ABC54HDG67WS --namespace default To configure the hclFlexnetURL and hclFlexnetID value overrides, you will need to specify your own license server information. For more information about these fields see How to Connect a Solution to a Flexet License Server . If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings . Additional value overrides can be added to the Helm install command as needed (for example if you have used a non-default name for the image pull secret): | Override | Command Line Argument | |---|---| | Custom ImagePullSecret name | --set global.sofyImagePullSecret={secret-name} | |Any other value overrides | --set {name}={value} | Now you can use kubectl or Helm commands to manage your deployed solution generated by SoFy. Monitor your solution pods to determine when the installation has completed and the pods are ready. kubectl get pods --namespace default The solution will be ready to access when all pods are in Running or Completed state, and the Running pods are all READY . For example, the output should be similar to this, where the READY column indicates when the running pods are ready to use. Pods that have completed are used to initialize other services and will not be in ready state: NAME READY STATUS RESTARTS AGE gcp1-access-control-service-5759f5fdbd-srd4j 1/1 Running 0 74m gcp1-acs-kc-postgresql-0 1/1 Running 0 74m gcp1-alexgcp1-kube-state-metrics-6d775b968b-kksjj 1/1 Running 0 74m gcp1-ambassador-88b456cbd-l7vph 1/1 Running 0 74m gcp1-ambassador-88b456cbd-lj94l 1/1 Running 0 74m gcp1-ambassador-88b456cbd-z2g6f 1/1 Running 0 74m gcp1-anchor-657c5c5569-zq5c7 1/1 Running 0 74m gcp1-grafana-769b8f7bb4-cck27 2/2 Running 0 74m gcp1-grafana-job-jxjqw 0/1 Completed 1 74m gcp1-keycloak-0 1/1 Running 0 74m gcp1-openldap-5f5866945b-ng6ft 1/1 Running 0 74m gcp1-product-design-mongo-bdf84fb6f-fdv62 1/1 Running 0 74m gcp1-product-design-redis-master-0 1/1 Running 0 74m gcp1-product-designer-client-5dc979df4f-2bwqk 1/1 Running 0 74m gcp1-product-designer-server-7f5b59f4f4-bfllh 1/1 Running 0 74m gcp1-product-runtime-c4d66cc54-qjhqf 1/1 Running 1 74m gcp1-prometheus-server-757bd5c746-fq7t4 2/2 Running 0 74m gcp1-snoop-788f87594f-mkvz4 1/1 Running 0 74m gcp1-sofy-console-d66cf776c-494xc 1/1 Running 0 74m gcp1-solution-controller-7c8bcfd59f-cktvq 1/1 Running 0 74m If you see pods with a status of ErrImagePull or ImagePullBackOff, check that you are installing to the correct namespace. If the pods seem to remain in Pending status for a long time, there may not be sufficient resources in the cluster. You can use the GCP dashboard to examine cluster resources, or run this command to query a specific pod: kubectl describe pods {pod name} --namespace default The last line of the output gives a useful diagnosis of the problem, for example: Warning FailedScheduling 40s (x24 over 28m) default-scheduler 0/2 nodes are available: 2 Insufficient memory. Once the pods are ready, find the external IP for the solution, which will be assigned to the ambassador service: kubectl get svc {release-name}-ambassador --namespace default The output should be similar to this: ``` NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gcpprod-ambassador LoadBalancer 10.48.1.192 35.226.228.226 80:31299/TCP,443:31379/TCP,2222:30537/TCP,31116:32031/TCP,3030:31394/TCP,3031:31525/TCP,3032:31565/TCP,3033:3 0959/TCP,3034:32123/TCP,3035:31855/TCP,3036:30515/TCP,3037:31103/TCP,3038:32227/TCP,3039:31334/TCP,3040:32044/TCP,3041:32125/TCP,3042:30903/TCP,3043:31559/TCP 17m ``` The external IP in the above example is 35.226.228.226. Enter the EXTERNAL-IP into this link to access the Solution Console app in your browser: https://sofy-console.EXTERNAL-IP.nip.io/. You will see some warnings about the certificate used in the solution; it is safe to accept these and proceed to the Solution Console application. Log in to the application with the default User ID (userid) and password: sol-admin and pass . The Solution Console provides information about all parts of the solution, as well as links to the home pages of the included products and services. When you are finished with your solution, you can uninstall it with this command: helm delete {release-name} --namespace default Be aware that the trial credit in your account will be used for resources assigned to the cluster, even if there is nothing running in it. If you don't plan to use your cluster for a while, you may consider deleting it and then recreating when you need it again.","title":"V. Install a SoFy Solution"},{"location":"topics/Installing%20Solutions/using_new_gcp_trial_account/#vi-security-of-your-gcp-cluster","text":"GKE is not secure by default. Any resources with an External IP in your new cluster will be accessible. There are a few important things you should do to lock down your cluster: Create Master Authorized Network for Your Cluster 1. Navigate to Kubernetes Engine > Clusters 2. Edit your cluster and set Master authorized networks to Enabled . This will ensure that your cluster API can only be accessed by GCP (in your Cloud Shell). If you want to use a local kubectl to connect to your cluster, you can add your own IP address as well (e.g 1.2.3.4/32) Create a Firewall Rule for your Cluster 1. Navigate to your GCP account Firewall rules page 2. Lock down your Firewall rules and stay on top of them * GCP creates some wide open firewall rules allowing ssh and other protocols to your GCP resources. The allowed client IP addresses are set to \u201c0.0.0.0/0\u201d which effectively means open to the internet. We will show you how to delete those below * Also when deploying \u201cLoadBalancer\u201d services in GKE, you will get a public IP address for the service and firewall rules will be automatically created letting the internet get to the service\u2019s exposed ports. To address this: * First create a firewall rule to allow your IP address to access everything: * VPC network > Firewall rules > Create Firewall Rule : * Name: let-me-in (or whatever name you like) * Targets: All instances in the network * Source IP Ranges: {your IP}/32. For example 1.2.3.4/32 * Protocols and Ports: \u201cAllow all\u201d 3. Regularly review your Firewall rules and delete any that have 0.0.0.0/0 in the IP Range. Here is a one-liner that will do that: ``` gcloud compute firewall-rules list --format=\"table(name,sourceRanges.list():label=SRC_RANGES)\" |grep \"0.0.0.0/0\" | grep -Eo '^[^ ]+' | while read line; do gcloud compute firewall-rules delete $line; done ```","title":"VI. Security of your GCP Cluster"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/","text":"Installing Solutions Overview for Kubernetes Administrators These instructions are designed for experienced Kubernetes users and list the steps for solution install. If you need more details on any step, see the Installing Solutions: Step-By-Step Instructions guide. Supported versions of Kubernetes, Helm, and Cert-Manager are listed in the Supported Kubernetes Environments guide. You will need the following: Cert-Manager must be installed in the target cluster Each solution must be in a separate namespace Create a pull secret using your HCL repository credentials Install the solution chart, providing the pull secret, and details of your license server helm install [release-name] [file-name] --set global.hclImagePullSecret=[secret-name] --set hclFlexnetURL=[flexnet-url] --set hclFlexnetID=[flexnet-id] To configure the hclFlexnetURL and hclFlexnetID value overrides you will need to specify your own license server information. For more information about these fields see the How to Connect a Solution to a FlexNet License Server guide. If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings .","title":"Kubernetes Administration"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/#installing-solutions-overview-for-kubernetes-administrators","text":"These instructions are designed for experienced Kubernetes users and list the steps for solution install. If you need more details on any step, see the Installing Solutions: Step-By-Step Instructions guide. Supported versions of Kubernetes, Helm, and Cert-Manager are listed in the Supported Kubernetes Environments guide. You will need the following: Cert-Manager must be installed in the target cluster Each solution must be in a separate namespace Create a pull secret using your HCL repository credentials Install the solution chart, providing the pull secret, and details of your license server helm install [release-name] [file-name] --set global.hclImagePullSecret=[secret-name] --set hclFlexnetURL=[flexnet-url] --set hclFlexnetID=[flexnet-id] To configure the hclFlexnetURL and hclFlexnetID value overrides you will need to specify your own license server information. For more information about these fields see the How to Connect a Solution to a FlexNet License Server guide. If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings .","title":"Installing Solutions Overview for Kubernetes Administrators"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/","text":"Applying a Domain and SSL Certificate to Your Solution By default, a SoFy Solution will create its own self signed SSL certificate. This is meant for initial development and testing and will throw many warnings and cause issues on most HTTP clients, including browsers and some of the most common programmatic client libraries. There are options to apply your own domain name and a recognized SSL certificate to a solution; these quick start instructions will describe the simpler method, using the Let's Encrypt service to dynamically generate a certificate. You will need the following prerequisites: A cluster in GCP configured to run a solution A domain name, for example one purchased from https://domains.google.com/ This document will go through the following steps: * Configuring your domain name and DNS zone * Creating a GCP service account with the DNS Administrator role * Creating a Kubernetes secret with the service account credentials * Configuring your solution to use the domain name and request certificate generation at install * Accessing your solution using the domain name and validating the certificate I. Configure your domain name and DNS zone Log into your GCP account at https://console.cloud.google.com. Navigate to Network Services > Cloud DNS and click Create Zone . Enter a name for the zone and your domain name in 'DNS name' then click create . When you click on the newly created zone, you will see a list of DNS servers, which need to be copied into your domain name configuration. Log into https://domains.google.com; in 'My Domains' click on the domain name that you are using for the solution. Navigate to DNS then select Use custom name servers . Cut and paste the DNS servers (one at a time, do not include the trailing '.') from the GCP Cloud DNS page to the Google domain name entry, then save. II. Create a GCP service account with the DNS administrator role Log into your GCP trial account at https://console.cloud.google.com. Navigate to IAM & Admin > Service Accounts and click on Create service account . Choose a name for the service account and ID (or accept the default ID); make a note of your service ID. In the menu of roles, find DNS and select DNS Administrator , then continue. Click on Create key and select JSON . The key will be generated - download to your local machine. Find the downloaded key file and rename it to \"credentials.json,\" then upload that file to your GCP Cloud Shell. III. Create a Kubernetes secret with the service account credentials kubectl create secret generic gcp-service-account-secret --from-file=./credentials.json IV. Configure your solution to use the domain name and to request certificate generation at install There are two ways to do this: a) unpack, edit, and then repack the solution Helm chart, or b) use the existing Helm chart but provide the configuration as override on the Helm install command Option A: Unpack, edit, and repack the solution Helm chart 1. Untar the solution chart and edit the top-level 'values.yaml' file. Near the top of the file you will see 'global:' and nested under that, 'domain: - edit the value of the domain property to be a subdomain of your domain name, for example: global: domain: \"sol1.alexmul.dev\" Search for the certificate: property in the same file, and add/edit these values. The GCP project ID can be seen by clicking the down-arrow next to your project name in the GCP console. certificate: type: \"production\" email: ${YOUR_GCP_ACCOUNT_EMAIL} dns: type: \"clouddns\" project: ${YOUR_GCP_PROJECT_ID} serviceAccountSecretRef: name: ${YOUR_GCP_SERVICE_ACCOUNT_SECRET_NAME} key: \"credentials.json\" for example, certificate: type: \"production\" email: \"sofy.mulholland@gmail.com\" existingCertificateSecret: \"\" dns: type: \"clouddns\" project: \"dark-airway-256814\" region: \"\" accessKeyID: \"\" serviceAccountSecretRef: name: \"gcp-service-account-secret\" key: \"credentials.json\" Optional: Edit the top-level chart.yaml file and increment the version number of the chart. It is a best practice to increment the version number when any change is made to the Helm chart. Repackage the Helm chart with the Helm package command. Install your modified Helm chart: helm install [my-release-name] [my-solution.tgz] --set global.hclImagePullSecret=[secret-name] Option B: Install your original Helm chart with additional configuration override on the install command, similar to this: helm install udeploy alex-deploy-0.1.0.tgz --set global.hclImagePullSecret=secret-name,global.hclImagePullSecret=secret-name,global.domain=sol1.alexmul.com,certificate.type=production,certificate.email=sofy.mulholland@hcl.com,certificate.dns.type=clouddns,certificate.dns.project=dark-airway-256814,certificate.dns.serviceAccountSecretRef.name=gcp-service-account-secret,certificate.dns.serviceAccountSecretRef.key=credentials.json V. Access your solution using the domain name and validiate the certificate For example: https://sofy-console.sol1.alexmul.dev","title":"Domains & Certificates"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#applying-a-domain-and-ssl-certificate-to-your-solution","text":"By default, a SoFy Solution will create its own self signed SSL certificate. This is meant for initial development and testing and will throw many warnings and cause issues on most HTTP clients, including browsers and some of the most common programmatic client libraries. There are options to apply your own domain name and a recognized SSL certificate to a solution; these quick start instructions will describe the simpler method, using the Let's Encrypt service to dynamically generate a certificate. You will need the following prerequisites: A cluster in GCP configured to run a solution A domain name, for example one purchased from https://domains.google.com/ This document will go through the following steps: * Configuring your domain name and DNS zone * Creating a GCP service account with the DNS Administrator role * Creating a Kubernetes secret with the service account credentials * Configuring your solution to use the domain name and request certificate generation at install * Accessing your solution using the domain name and validating the certificate","title":"Applying a Domain and SSL Certificate to Your Solution"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#i-configure-your-domain-name-and-dns-zone","text":"Log into your GCP account at https://console.cloud.google.com. Navigate to Network Services > Cloud DNS and click Create Zone . Enter a name for the zone and your domain name in 'DNS name' then click create . When you click on the newly created zone, you will see a list of DNS servers, which need to be copied into your domain name configuration. Log into https://domains.google.com; in 'My Domains' click on the domain name that you are using for the solution. Navigate to DNS then select Use custom name servers . Cut and paste the DNS servers (one at a time, do not include the trailing '.') from the GCP Cloud DNS page to the Google domain name entry, then save.","title":"I. Configure your domain name and DNS zone"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#ii-create-a-gcp-service-account-with-the-dns-administrator-role","text":"Log into your GCP trial account at https://console.cloud.google.com. Navigate to IAM & Admin > Service Accounts and click on Create service account . Choose a name for the service account and ID (or accept the default ID); make a note of your service ID. In the menu of roles, find DNS and select DNS Administrator , then continue. Click on Create key and select JSON . The key will be generated - download to your local machine. Find the downloaded key file and rename it to \"credentials.json,\" then upload that file to your GCP Cloud Shell.","title":"II. Create a GCP service account with the DNS administrator role"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#iii-create-a-kubernetes-secret-with-the-service-account-credentials","text":"kubectl create secret generic gcp-service-account-secret --from-file=./credentials.json","title":"III. Create a Kubernetes secret with the service account credentials"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#iv-configure-your-solution-to-use-the-domain-name-and-to-request-certificate-generation-at-install","text":"There are two ways to do this: a) unpack, edit, and then repack the solution Helm chart, or b) use the existing Helm chart but provide the configuration as override on the Helm install command Option A: Unpack, edit, and repack the solution Helm chart 1. Untar the solution chart and edit the top-level 'values.yaml' file. Near the top of the file you will see 'global:' and nested under that, 'domain: - edit the value of the domain property to be a subdomain of your domain name, for example: global: domain: \"sol1.alexmul.dev\" Search for the certificate: property in the same file, and add/edit these values. The GCP project ID can be seen by clicking the down-arrow next to your project name in the GCP console. certificate: type: \"production\" email: ${YOUR_GCP_ACCOUNT_EMAIL} dns: type: \"clouddns\" project: ${YOUR_GCP_PROJECT_ID} serviceAccountSecretRef: name: ${YOUR_GCP_SERVICE_ACCOUNT_SECRET_NAME} key: \"credentials.json\" for example, certificate: type: \"production\" email: \"sofy.mulholland@gmail.com\" existingCertificateSecret: \"\" dns: type: \"clouddns\" project: \"dark-airway-256814\" region: \"\" accessKeyID: \"\" serviceAccountSecretRef: name: \"gcp-service-account-secret\" key: \"credentials.json\" Optional: Edit the top-level chart.yaml file and increment the version number of the chart. It is a best practice to increment the version number when any change is made to the Helm chart. Repackage the Helm chart with the Helm package command. Install your modified Helm chart: helm install [my-release-name] [my-solution.tgz] --set global.hclImagePullSecret=[secret-name] Option B: Install your original Helm chart with additional configuration override on the install command, similar to this: helm install udeploy alex-deploy-0.1.0.tgz --set global.hclImagePullSecret=secret-name,global.hclImagePullSecret=secret-name,global.domain=sol1.alexmul.com,certificate.type=production,certificate.email=sofy.mulholland@hcl.com,certificate.dns.type=clouddns,certificate.dns.project=dark-airway-256814,certificate.dns.serviceAccountSecretRef.name=gcp-service-account-secret,certificate.dns.serviceAccountSecretRef.key=credentials.json","title":"IV. Configure your solution to use the domain name and to request certificate generation at install"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/applying_your_own_domain_name_and_ssl_cert/#v-access-your-solution-using-the-domain-name-and-validiate-the-certificate","text":"For example: https://sofy-console.sol1.alexmul.dev","title":"V. Access your solution using the domain name and validiate the certificate"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/installing_solutions_step_by_step_instructions/","text":"Installing Solutions Step-By-Step Instructions These instructions are designed for those who have an existing Kubernetes environment, and detail the steps for solution install. Supported versions of Kubernetes, Helm, and Cert-Manager are listed in the Supported Kubernetes Environments guide. If you need more details on any step, see the Installing Solutions: Getting Started with a GCP Trial Account Tutorial , which also provides a script that automates most of the setup. You will need permissions to install to the Kubernetes cluster. Use of a cluster that supports dynamic PV is recommended. To install your solution: Install a supported version of Helm 3 wget https://hclcr.io/files/sofy/scripts/get-helm3.sh && source get-helm3.sh Install Cert-Manager in your cluster This script can be used to perform the Cert-Manager install, or to examine the commands required: https://hclcr.io/files/sofy/scripts/cert-manager-setup.sh Create a namespace for your solution (optional) Each solution must be installed in a separate namespace; if you install into the default namespace you can omit the --namespace parameters on the remaining commands kubectl create namespace [name] Create an image pull secret in the solution namespace kubectl create secret docker-registry [secret-name] --docker-server=hclcr.io --docker-username=[sofy userid] --docker-password=[CLI secret] --namespace=[solution namespace] To set your Harbor CLI secret, login to hclcr.io with your HCL/SoFy credentials, selecting LOGIN VIA OIDC PROVIDER Open your User Profile (in the top right corner, click on the dropdown for your username) and enter a secret string of your choice Use this string as the CLI secret in the command shown above Use Helm to install the solution chart The solution chart can be downloaded from the SoFy application, on the solution details screen helm install [release-name] [file-name] --namespace [solution-namespace] --set global.hclImagePullSecret=[secret-name] --set hclFlexnetURL=[flexnet-url] --set hclFlexnetID=[flexnet-id] Summary of the variables above: * [release-name] A Helm release name that is not already used * [file-name] The file name of your downloaded solution * [solution-namespace] The namespace you are installing your solution into * [secret-name] The name of your pull secret created in Step #4 * [flexnet-url],[flexnet-id] Your license server information. For more information about these fields see How to Connect a Solution to a FlexNet License Server below. If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings You may need to set additional value overrides for the specific contents of your solution, see the documentation for those products and services in the SoFy Catalog. If you are using an AWS EKS cluster, add this annotation to the solution's ambassador service so it can receive an external IP: kubectl annotate svc [solution-ambassador-svc] -n [solution-namespace] service.beta.kubernetes.io/aws-load-balancer-internal=0.0.0.0/0 Note: The process of assigning an external LoadBalancer IP address to the annotated service may take a few minutes. kubectl get cm [releasename]-domain -o yaml The output will be similar to the following. You will need the value of the HOST field: apiVersion: v1 data: HOST: 10.190.16.62.nip.io HOST_PROTOCOL: https kind: ConfigMap Access the Solution Console Once the install has completed and all pods are ready, enter the HOST into this link to access the Solution Console app in your browser: h ttps://sofy-console.[HOST]. You will see some warnings about the certificate used in the solution; it is safe to accept these and proceed to the Solution Console application. Log in to the application with the default User ID (userid) and password: sol-admin and pass. The Solution Console provides information about all parts of the solution, as well as links to the home pages of the included products and services. The Tutorial Installing Solutions: Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial provides detail on viewing the status of the install process and various troubleshooting tips.","title":"Install Step-By-Step"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/installing_solutions_step_by_step_instructions/#installing-solutions-step-by-step-instructions","text":"These instructions are designed for those who have an existing Kubernetes environment, and detail the steps for solution install. Supported versions of Kubernetes, Helm, and Cert-Manager are listed in the Supported Kubernetes Environments guide. If you need more details on any step, see the Installing Solutions: Getting Started with a GCP Trial Account Tutorial , which also provides a script that automates most of the setup. You will need permissions to install to the Kubernetes cluster. Use of a cluster that supports dynamic PV is recommended. To install your solution: Install a supported version of Helm 3 wget https://hclcr.io/files/sofy/scripts/get-helm3.sh && source get-helm3.sh Install Cert-Manager in your cluster This script can be used to perform the Cert-Manager install, or to examine the commands required: https://hclcr.io/files/sofy/scripts/cert-manager-setup.sh Create a namespace for your solution (optional) Each solution must be installed in a separate namespace; if you install into the default namespace you can omit the --namespace parameters on the remaining commands kubectl create namespace [name] Create an image pull secret in the solution namespace kubectl create secret docker-registry [secret-name] --docker-server=hclcr.io --docker-username=[sofy userid] --docker-password=[CLI secret] --namespace=[solution namespace] To set your Harbor CLI secret, login to hclcr.io with your HCL/SoFy credentials, selecting LOGIN VIA OIDC PROVIDER Open your User Profile (in the top right corner, click on the dropdown for your username) and enter a secret string of your choice Use this string as the CLI secret in the command shown above Use Helm to install the solution chart The solution chart can be downloaded from the SoFy application, on the solution details screen helm install [release-name] [file-name] --namespace [solution-namespace] --set global.hclImagePullSecret=[secret-name] --set hclFlexnetURL=[flexnet-url] --set hclFlexnetID=[flexnet-id] Summary of the variables above: * [release-name] A Helm release name that is not already used * [file-name] The file name of your downloaded solution * [solution-namespace] The namespace you are installing your solution into * [secret-name] The name of your pull secret created in Step #4 * [flexnet-url],[flexnet-id] Your license server information. For more information about these fields see How to Connect a Solution to a FlexNet License Server below. If you do not specify these values, some solution contents may not initialize properly or have full function available until you enter your license server information via the Solution Console Settings You may need to set additional value overrides for the specific contents of your solution, see the documentation for those products and services in the SoFy Catalog. If you are using an AWS EKS cluster, add this annotation to the solution's ambassador service so it can receive an external IP: kubectl annotate svc [solution-ambassador-svc] -n [solution-namespace] service.beta.kubernetes.io/aws-load-balancer-internal=0.0.0.0/0 Note: The process of assigning an external LoadBalancer IP address to the annotated service may take a few minutes. kubectl get cm [releasename]-domain -o yaml The output will be similar to the following. You will need the value of the HOST field: apiVersion: v1 data: HOST: 10.190.16.62.nip.io HOST_PROTOCOL: https kind: ConfigMap Access the Solution Console Once the install has completed and all pods are ready, enter the HOST into this link to access the Solution Console app in your browser: h ttps://sofy-console.[HOST]. You will see some warnings about the certificate used in the solution; it is safe to accept these and proceed to the Solution Console application. Log in to the application with the default User ID (userid) and password: sol-admin and pass. The Solution Console provides information about all parts of the solution, as well as links to the home pages of the included products and services. The Tutorial Installing Solutions: Getting Started with Solutions in a Google Cloud Platform Trial Account Tutorial provides detail on viewing the status of the install process and various troubleshooting tips.","title":"Installing Solutions Step-By-Step Instructions"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/","text":"How to Connect a Solution to a FlexNet License Server FlexNet Licensing Overview HCL Software is protected by runtime license checks performed against a license server, which runs as an external process. Multiple HCL Software products can perform checks against the same license server. A separate license server is provided for each customer account, containing the product license entitlements for that account. The license server technology is called FlexNet Embedded. License servers are generally hosted in the cloud and accessed over the public network; these are termed Cloud License Servers. Some products allow the option of running the license server within a private network; these are termed Local License Servers. In both cases, the license server is populated with the purchased product entitlements, and the installed HCL Software products are configured to make calls to that license server to validate the required entitlement. FlexNet Licensing in SoFy When HCL Software products are run in a SoFy Solution, the license server information can be set centrally for the solution and it will then be used by all the products in the solution. The Solution Console can be used to view the entitlement information held by that license server and will display a warning if the solution includes a product for which the license server does not include an entitlement. When you install a solution into your own environment, you must provide your FlexNet License Server URL and FlexNet License Server ID, so that the solution can connect to the license server. How to Determine your hclFlexnetURL and hclFlexnetID Your FlexNet information should be obtained from your organization's license administrator. The hclFlexnetID will be unique to your organization. If your organization uses a CLS (Cloud License Server), the hclFlexnetURL will in most cases be: hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com If you have administrative rights to the FlexNet Operations Portal then you can retrieve the ID for your existing Cloud License Server(s) in Devices view. You may also use the Devices view to create new Cloud License Server(s) and manage the entitlements mapped to a given Cloud License Server. If your organization uses a locally installed license server, the URL will include a domain specific to your organization or an IP address and port typically in the 27000-27009 range. There are two ways you can set the license server information in a solution: * When installing the solution, use override to the hclFlexnetURL and hclFlexnetID properties, for example: ``` helm install my-release-name my-solution.tgz --set hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com --set hclFlexnetID=ABCD1235654543 --set global.hclImagePullSecret=my-sofy-secret ``` After installing the solution, using the Solution Console: Within the Solution Console, click on the Gear icon and select Manage License Server Provide your FlexNet License Server URL and FlexNet Server ID Click Apply and your license will be applied Note that some product services may not initialize until the license server has been configured and may require a restart to connect to the license server. This can be achieved by deleting the relevant pod, which can be done through the Pods view in the Solution Console. Both methods will allow you to view and change the current settings through the Solution Console, and to view the license entitlements in the license server. Working with Multiple License Servers If your license entitlement for one product is in a different license server, you can configure that product to send requests directly to your other license server by setting the same properties on that service. For example, if your HCL Informix entitlements are in a separate license server, specify it as below: helm install my-release-name my-solution.tgz --set hclFlexnetURL=[license server URL] --set hclFlexnetID=[license server ID] --set informix.hclFlexnetURL=[informix license server URL] --set informix.hclFlexnetID=[informix license server ID] --set global.hclImagePullSecret=secret-name Information for that license server will not be displayed by the Solution Console, and any warning about missing license entitlements for that product can be ignored.","title":"FlexNet Licensing"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/#how-to-connect-a-solution-to-a-flexnet-license-server","text":"","title":"How to Connect a Solution to a FlexNet License Server"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/#flexnet-licensing-overview","text":"HCL Software is protected by runtime license checks performed against a license server, which runs as an external process. Multiple HCL Software products can perform checks against the same license server. A separate license server is provided for each customer account, containing the product license entitlements for that account. The license server technology is called FlexNet Embedded. License servers are generally hosted in the cloud and accessed over the public network; these are termed Cloud License Servers. Some products allow the option of running the license server within a private network; these are termed Local License Servers. In both cases, the license server is populated with the purchased product entitlements, and the installed HCL Software products are configured to make calls to that license server to validate the required entitlement.","title":"FlexNet Licensing Overview"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/#flexnet-licensing-in-sofy","text":"When HCL Software products are run in a SoFy Solution, the license server information can be set centrally for the solution and it will then be used by all the products in the solution. The Solution Console can be used to view the entitlement information held by that license server and will display a warning if the solution includes a product for which the license server does not include an entitlement. When you install a solution into your own environment, you must provide your FlexNet License Server URL and FlexNet License Server ID, so that the solution can connect to the license server.","title":"FlexNet Licensing in SoFy"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/#how-to-determine-your-hclflexneturl-and-hclflexnetid","text":"Your FlexNet information should be obtained from your organization's license administrator. The hclFlexnetID will be unique to your organization. If your organization uses a CLS (Cloud License Server), the hclFlexnetURL will in most cases be: hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com If you have administrative rights to the FlexNet Operations Portal then you can retrieve the ID for your existing Cloud License Server(s) in Devices view. You may also use the Devices view to create new Cloud License Server(s) and manage the entitlements mapped to a given Cloud License Server. If your organization uses a locally installed license server, the URL will include a domain specific to your organization or an IP address and port typically in the 27000-27009 range. There are two ways you can set the license server information in a solution: * When installing the solution, use override to the hclFlexnetURL and hclFlexnetID properties, for example: ``` helm install my-release-name my-solution.tgz --set hclFlexnetURL=https://hclsoftware.compliance.flexnetoperations.com --set hclFlexnetID=ABCD1235654543 --set global.hclImagePullSecret=my-sofy-secret ``` After installing the solution, using the Solution Console: Within the Solution Console, click on the Gear icon and select Manage License Server Provide your FlexNet License Server URL and FlexNet Server ID Click Apply and your license will be applied Note that some product services may not initialize until the license server has been configured and may require a restart to connect to the license server. This can be achieved by deleting the relevant pod, which can be done through the Pods view in the Solution Console. Both methods will allow you to view and change the current settings through the Solution Console, and to view the license entitlements in the license server.","title":"How to Determine your hclFlexnetURL and hclFlexnetID"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/setting_up_flexnet/#working-with-multiple-license-servers","text":"If your license entitlement for one product is in a different license server, you can configure that product to send requests directly to your other license server by setting the same properties on that service. For example, if your HCL Informix entitlements are in a separate license server, specify it as below: helm install my-release-name my-solution.tgz --set hclFlexnetURL=[license server URL] --set hclFlexnetID=[license server ID] --set informix.hclFlexnetURL=[informix license server URL] --set informix.hclFlexnetID=[informix license server ID] --set global.hclImagePullSecret=secret-name Information for that license server will not be displayed by the Solution Console, and any warning about missing license entitlements for that product can be ignored.","title":"Working with Multiple License Servers"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/supported_kubernetes_environments/","text":"Supported Kubernetes Environments There are many options for utilizing your own Kubernetes environment: Open source Kubernetes can be used for a self-managed environment Most public cloud vendors provide supported Kubernetes installations, for example Google Kubernetes Engine and Amazon Elastic Kubernetes Service Some private cloud platforms allow Kubernetes to run in your data center or public cloud account HCL SoFy is designed to allow solutions to run in any Kubernetes environment. Solution dependencies relate to core Kubernetes only, with no use of vendor-specific services. With a growing number of Kubernetes vendors, however, solutions are tested on specific sets as listed below. If you run SoFy Solutions in a different environment, we do our best to address any issues but may need to work with you directly to debug problems that appear to be specific to your environment. Please note that individual products and services in the SoFy Catalog may document their own support policies for different Kubernetes versions and providers. Tested Kubernetes Environments Google Kubernetes Engine Amazon Elastic Kubernetes Service Red Hat OpenShift Container Platform OpenShift security policies mean that most Helm charts will not work out of the box. Please check the documentation for the individual catalog items to see if instructions are provided for installation on OpenShift. Supported Kubernetes Versions The Kubernetes project couples frequent releases with a strict compatibility policy , to allow rapid innovation of the platform but to minimize impacts of those updates to existing applications. Most update issues can be avoided by using only generally available (stable) APIs, but even those may sometimes be deprecated and eventually removed. Solutions built on the current version of SoFy are supported when run on the following tested Kubernetes versions: 1.16 1.17 1.18 Cluster Requirements and Limitations Cert-Manager must be installed in the cluster; version 0.15.1 or later Each solution must be installed in a separate namespace The Helm 3 client must be used to install solutions; supported version: 3.3.0 or later","title":"Supported Environments"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/supported_kubernetes_environments/#supported-kubernetes-environments","text":"There are many options for utilizing your own Kubernetes environment: Open source Kubernetes can be used for a self-managed environment Most public cloud vendors provide supported Kubernetes installations, for example Google Kubernetes Engine and Amazon Elastic Kubernetes Service Some private cloud platforms allow Kubernetes to run in your data center or public cloud account HCL SoFy is designed to allow solutions to run in any Kubernetes environment. Solution dependencies relate to core Kubernetes only, with no use of vendor-specific services. With a growing number of Kubernetes vendors, however, solutions are tested on specific sets as listed below. If you run SoFy Solutions in a different environment, we do our best to address any issues but may need to work with you directly to debug problems that appear to be specific to your environment. Please note that individual products and services in the SoFy Catalog may document their own support policies for different Kubernetes versions and providers.","title":"Supported Kubernetes Environments"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/supported_kubernetes_environments/#tested-kubernetes-environments","text":"Google Kubernetes Engine Amazon Elastic Kubernetes Service Red Hat OpenShift Container Platform OpenShift security policies mean that most Helm charts will not work out of the box. Please check the documentation for the individual catalog items to see if instructions are provided for installation on OpenShift.","title":"Tested Kubernetes Environments"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/supported_kubernetes_environments/#supported-kubernetes-versions","text":"The Kubernetes project couples frequent releases with a strict compatibility policy , to allow rapid innovation of the platform but to minimize impacts of those updates to existing applications. Most update issues can be avoided by using only generally available (stable) APIs, but even those may sometimes be deprecated and eventually removed. Solutions built on the current version of SoFy are supported when run on the following tested Kubernetes versions: 1.16 1.17 1.18","title":"Supported Kubernetes Versions"},{"location":"topics/Installing%20Solutions/Kubernetes%20Administration/supported_kubernetes_environments/#cluster-requirements-and-limitations","text":"Cert-Manager must be installed in the cluster; version 0.15.1 or later Each solution must be installed in a separate namespace The Helm 3 client must be used to install solutions; supported version: 3.3.0 or later","title":"Cluster Requirements and Limitations"},{"location":"topics/Solution%20Overview/","text":"Solution Overview","title":"Solution Overview"},{"location":"topics/Solution%20Overview/#solution-overview","text":"","title":"Solution Overview"},{"location":"topics/Solution%20Overview/sofy_common_services/","text":"SoFy Common Services These services can be used to provide enhanced management and security of your solution: Solution Console The Solution Console application provides a simplified solution administration experience, including: * Kubernetes cluster info, which is filtered to only show the information for the solution resources; this is useful if you are new to Kubernetes or are operating in a large cluster, but are only concerned with the solution application * URLs for the services and products selected from the SoFy Catalog - these include links to product GUIs, REST API swagger UIs, and base URLs for REST APIs * Easy setting of FlexNet License Server properties for HCL licensed content * Links to other common services in the solution: * the Grafana monitoring dashboard * the KeyCloak GUI to manage users, passwords, and access controls * the Prometheus GUI for low-level access to monitoring data * Access to logs for all pods in the solution If the solution is running in the SoFy Sandbox, a link to the Solution Console is displayed in the Solution Details view. If you have installed the Solution in your own environment, the URL for the Solution Console will be displayed at completion of the Helm install. It can also be constructed using the external-IP assigned to the ambassador services as follows: h ttps://sofy-console.{external-IP}/ The default Administrator ID is \"sol-admin\" and Password is \"pass\" - use this to login to your SoFy Sandbox. Access Control Service (ACS) ACS is an optional service that provides both authentication and authorization controls for traffic accessing the solution external IP. When included in a solution, the ACS is registered as the authentication service for Ambassador and by default, and it will be called to examine every request. The following default users and passwords are created for each new solution: user/pass allows access to SoFy Catalog services sol-admin/pass allows access to SoFy Catalog services and to Solution Console Users and passwords can be managed through the Keycloak component that is included in ACS. A link to the Keycloak GUI is available in the Solution Console application as follows: h ttps://sofy-kc.{solution-ip}. Monitoring Dashboard The optional Monitoring service includes Prometheus, to gather and store monitoring data, and Grafana, to display that data in visual dashboards.","title":"SoFy Common Services"},{"location":"topics/Solution%20Overview/sofy_common_services/#sofy-common-services","text":"These services can be used to provide enhanced management and security of your solution:","title":"SoFy Common Services"},{"location":"topics/Solution%20Overview/sofy_common_services/#solution-console","text":"The Solution Console application provides a simplified solution administration experience, including: * Kubernetes cluster info, which is filtered to only show the information for the solution resources; this is useful if you are new to Kubernetes or are operating in a large cluster, but are only concerned with the solution application * URLs for the services and products selected from the SoFy Catalog - these include links to product GUIs, REST API swagger UIs, and base URLs for REST APIs * Easy setting of FlexNet License Server properties for HCL licensed content * Links to other common services in the solution: * the Grafana monitoring dashboard * the KeyCloak GUI to manage users, passwords, and access controls * the Prometheus GUI for low-level access to monitoring data * Access to logs for all pods in the solution If the solution is running in the SoFy Sandbox, a link to the Solution Console is displayed in the Solution Details view. If you have installed the Solution in your own environment, the URL for the Solution Console will be displayed at completion of the Helm install. It can also be constructed using the external-IP assigned to the ambassador services as follows: h ttps://sofy-console.{external-IP}/ The default Administrator ID is \"sol-admin\" and Password is \"pass\" - use this to login to your SoFy Sandbox.","title":"Solution Console"},{"location":"topics/Solution%20Overview/sofy_common_services/#access-control-service-acs","text":"ACS is an optional service that provides both authentication and authorization controls for traffic accessing the solution external IP. When included in a solution, the ACS is registered as the authentication service for Ambassador and by default, and it will be called to examine every request. The following default users and passwords are created for each new solution: user/pass allows access to SoFy Catalog services sol-admin/pass allows access to SoFy Catalog services and to Solution Console Users and passwords can be managed through the Keycloak component that is included in ACS. A link to the Keycloak GUI is available in the Solution Console application as follows: h ttps://sofy-kc.{solution-ip}.","title":"Access Control Service (ACS)"},{"location":"topics/Solution%20Overview/sofy_common_services/#monitoring-dashboard","text":"The optional Monitoring service includes Prometheus, to gather and store monitoring data, and Grafana, to display that data in visual dashboards.","title":"Monitoring Dashboard"},{"location":"topics/Solution%20Overview/solution-overview/","text":"Solution Overview A SoFy Solution is a Kubernetes application, described by a Helm chart that is generated by SoFy. A solution includes: * One or more services (products, modules, demo packs) selected from the SoFy Catalog, which provide the desired application capabilities * Routing and monitoring services * Optional platform services, known as SoFy Common Services, that provide a secure and managed environment; opt in or out to these services when you create a new SoFy Solution All services are managed through their applicable Helm charts. When a solution is installed into Kubernetes, the services run in a private network, communicating with each other using internal IP addresses that are not accessible by services outside the solution\u2019s network. All access from outside the solution, such as from your browser or local application, is made through the single external IP address for the solution. This external IP address connects to the routing component, or ingress controller. SoFy uses Ambassador as the ingress controller for each solution. It provides a useful control point for all traffic in and out of the solution network, as in the example of applying access control.","title":"What is a Solution?"},{"location":"topics/Solution%20Overview/solution-overview/#solution-overview","text":"A SoFy Solution is a Kubernetes application, described by a Helm chart that is generated by SoFy. A solution includes: * One or more services (products, modules, demo packs) selected from the SoFy Catalog, which provide the desired application capabilities * Routing and monitoring services * Optional platform services, known as SoFy Common Services, that provide a secure and managed environment; opt in or out to these services when you create a new SoFy Solution All services are managed through their applicable Helm charts. When a solution is installed into Kubernetes, the services run in a private network, communicating with each other using internal IP addresses that are not accessible by services outside the solution\u2019s network. All access from outside the solution, such as from your browser or local application, is made through the single external IP address for the solution. This external IP address connects to the routing component, or ingress controller. SoFy uses Ambassador as the ingress controller for each solution. It provides a useful control point for all traffic in and out of the solution network, as in the example of applying access control.","title":"Solution Overview"},{"location":"topics/Using%20Solutions/","text":"Using Solutions","title":"Using Solutions"},{"location":"topics/Using%20Solutions/#using-solutions","text":"","title":"Using Solutions"},{"location":"topics/Using%20Solutions/accessing_solutions_programmatically/","text":"Accessing Solutions Programmatically Many of the SoFy Catalog services in a solution contain REST APIs, which are simple to use in client applications. The code examples shown below are written in Java, using the HTTP Client that was new in Java version 11 (java.net.http.HttpClient), but with REST you can choose from many programming languages and REST libraries for your application. Discovering REST API Documentation for SoFy Catalog Services There are two ways to discover the REST APIs provided by SoFy Catalog services and products. Both rely on the API being documented using the Swagger v2 or OpenAPI v3 standard: SoFy Catalog Click on a catalog card to view its documentation. The API Documentation tab will contain available REST API documentation. In the catalog, this is simply a rendering of the documentation; there is no live instance of the service available, so the REST API method cannot be run in this environment. The documentation is provided as reference for your application coding. Swagger UIs in Deployed Solutions In some cases, a live Swagger or OpenAPI UI is available within a service or product once it is deployed in an installed solution. Links to these UIs are shown in the Solution Console in the General Information for each entry, under the API Explorer tag. Discovering REST API Base URLs in Deployed Solutions REST API base URLs are displayed in the Solution Console, in the General Information for each entry, under the API BASE tag. Handling Self-Signed Certificates By default, SoFy generates a self-signed SSL/TLS certificate for each solution. For production use, it is recommended that you override this with a certificate generated for your own domain name. In development, you may choose to operate with the provided certificate. In Java applications, one approach to self-signed certificates is to override the default trust manager with one that does not validate certificate chains: ``` import java.net.http.HttpClient; import java.security.GeneralSecurityException; import java.security.cert.X509Certificate; import javax.net.ssl.SSLContext; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; ... // Create a trust manager that does not validate certificate chains TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() { public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } public void checkClientTrusted( java.security.cert.X509Certificate[] certs, String authType) { } public void checkServerTrusted( java.security.cert.X509Certificate[] certs, String authType) { } } }; // Create the all-trusting trust manager SSLContext sc = null; try { sc = SSLContext.getInstance(\"SSL\"); sc.init(null, trustAllCerts, new java.security.SecureRandom()); } catch (GeneralSecurityException e) { } // Also need to tell the client to not compare request host names with the certificate content final Properties props = System.getProperties(); props.setProperty(\"jdk.internal.httpclient.disableHostnameVerification\", Boolean.TRUE.toString()); // set the all-trusting trust manager on the client builder HttpClient.Builder builder = HttpClient.newBuilder(); builder.sslContext(sc); // Create HTTP Client to send requests to solution services HttpClient sol_client = builder .version(Version.HTTP_1_1) .build(); ## Authenticate to Obtain a JSON Web Token (JWT) If the Access Control Service (ACS) is included in the solution, you first need to authenticate to ACS and then receive a JWT to include on any subsequent API call. Authentication is achieved through a GET request to the *h<span>ttps://sofy-auth.{external.ip}.nip.io/login* endpoint using the HTTP Basic authentication protocol. There are two User IDs (userids) that are created for every solution and you can add more User IDs if you wish. | Userid | Default password | Access | | ----------- | ----------- | ----------- | | user | pass | catalog services | | sol-admin | pass | all services (including Solution Console)| To access Solution Console, use the *sol-admin* administrator id. The User ID (userid) and password must be Base64 encoded and included in the **Authorization** HTTP header, as shown in the example below: String idpw = \"user:pass\"; String encodedString = Base64.getEncoder().encodeToString(idpw.getBytes()); // replace with your own solution's external ip address ext_ip = \"34.67.88.109.nip.io\"; HttpResponse response = null; try { String url = \"https://sofy-auth.\" + ext_ip + \"/login\"; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(url)) .GET() .timeout(Duration.ofSeconds(150)) .header(\"accept\", \"application/json\") .header(\"Authorization\", \"Basic \"+encodedString) .build(); // Send a request using the HTTPClient that was created with the all-trusting trust manager response = sol_client.send(request, BodyHandlers.ofString()); switch (response.statusCode()) { case (200): // Success - extract JWT from Auth header and save it for future requests HttpHeaders headers = response.headers(); List<String> auths = headers.allValues(\"Authorization\"); // Header requires 'Bearer' before actual token value token = \"Bearer \"+(String)response.body(); // You may want to persist the token at this point break; case (404): System.out.println(\"sofy-auth login not found, perhaps ACS not included in this solution\"); break; case (500): // Workaround: ACS may take a short time to complete initialization System.out.println(\"sofy-auth login returned 500, will retry once after a short pause\"); Thread.sleep(60000); loginToSolution(idpw, soldomain); break; default: System.out.println(\"sofy-auth login failed: \"+response.statusCode()); System.out.println(response.body()); } }catch(Exception e) { e.printStackTrace(); } The JWT will be valid for 5 minutes and then will expire, after which re-authentication will be necessary. If you wish to query the expiry time of the token, the code below shows how to do that using the Auth0 java-jwt library. import com.auth0.jwt.JWT; import com.auth0.jwt.exceptions.JWTDecodeException; import com.auth0.jwt.interfaces.DecodedJWT; ... DecodedJWT jwt = null; String jwtString = token.replace(\"Bearer \",\"\"); try { jwt = JWT.decode(jwtString); Date expiryTime = jwt.getExpiresAt(); Date now = new Date(); System.out.println(\"token expires at: \"+expiryTime); System.out.println(\"time now is: \"+now); tokenExpired = now.after(expiryTime); if (tokenExpired) System.out.println(\"Token for solution access is already expired - expect 401/403 the re-authentication\"); // Could choose to re-login here, but an unexpired token may still expire between this point and the next API call } catch (JWTDecodeException exception){ System.out.println(\"JWT decode failed for token: \"+jwtString); exception.printStackTrace(); } ## Call the Catalog Service REST API Once you have the URL for the REST method you want to call, an HTTP client that will handle self-signed certificates (unless you have applied your own domain/certificate), and the authorization token (if ACS is used in your solution), then you are ready to make a call to a catalog service REST API. There are a couple of workarounds shown in the example below, with a counter to limit the retry attempts. private static void callApi() { HttpResponse response = null; apiCallCounter++; if (apiCallCounter > apiCallRetryLimit) { System.out.println(\"Reached max attempts to call solution REST API, giving up\"); return; } boolean tokenExpired = false; try { String url = \"https://test-data-synth.\" + ext_ip + \"/datasynth/1.0/data/ccVisa?count=5\"; HttpRequest.Builder builder = HttpRequest.newBuilder(); if (acs) { builder.header(\"Authorization\", token); // be careful not to add null token (-> NPE) HttpRequest request = builder .uri(URI.create(url)) .GET() .timeout(Duration.ofSeconds(90)) .header(\"accept\", \"application/json\") .build(); response = sol_client.send(request, BodyHandlers.ofString()); switch (response.statusCode()) { case (200): System.out.println(\"tds GET returned 200\"); JSONArray testDataJson = new JSONArray((String)response.body()); System.out.println(testDataJson.toString(4)); break; case (307): System.out.println(\"*** RC 307 Redirect - suggests protected method was called without auth header data\"); break; case (401): case (403): System.out.println(\"*** Authentication/Authorization issue, RC: \"+response.statusCode()); System.out.println(\"May be token expiry, re-authenticate (once) and retry\"); // call method with login logic shown above loginToSolution(\"user:pass\", ext_ip); apiCallCounter = apiCallRetryLimit -1; callApi(); break; case (404): System.out.println(\"*** 404: tds records not found... service may not be included or not running\"); break; case (503): System.out.println(\"*** 503 returned - wait 5 seconds then try again\"); Thread.sleep(5000); callApi(); break; default: System.out.println(\"*** tds home access failed: \"+response.statusCode()); System.out.println(\"response body: \"+response.body()); System.out.println(\"response headers:: \"+response.headers()); } }catch(Exception e) { e.printStackTrace(); } } ```","title":"Accessing Programmatically"},{"location":"topics/Using%20Solutions/accessing_solutions_programmatically/#accessing-solutions-programmatically","text":"Many of the SoFy Catalog services in a solution contain REST APIs, which are simple to use in client applications. The code examples shown below are written in Java, using the HTTP Client that was new in Java version 11 (java.net.http.HttpClient), but with REST you can choose from many programming languages and REST libraries for your application.","title":"Accessing Solutions Programmatically"},{"location":"topics/Using%20Solutions/accessing_solutions_programmatically/#discovering-rest-api-documentation-for-sofy-catalog-services","text":"There are two ways to discover the REST APIs provided by SoFy Catalog services and products. Both rely on the API being documented using the Swagger v2 or OpenAPI v3 standard: SoFy Catalog Click on a catalog card to view its documentation. The API Documentation tab will contain available REST API documentation. In the catalog, this is simply a rendering of the documentation; there is no live instance of the service available, so the REST API method cannot be run in this environment. The documentation is provided as reference for your application coding. Swagger UIs in Deployed Solutions In some cases, a live Swagger or OpenAPI UI is available within a service or product once it is deployed in an installed solution. Links to these UIs are shown in the Solution Console in the General Information for each entry, under the API Explorer tag.","title":"Discovering REST API Documentation for SoFy Catalog Services"},{"location":"topics/Using%20Solutions/accessing_solutions_programmatically/#discovering-rest-api-base-urls-in-deployed-solutions","text":"REST API base URLs are displayed in the Solution Console, in the General Information for each entry, under the API BASE tag.","title":"Discovering REST API Base URLs in Deployed Solutions"},{"location":"topics/Using%20Solutions/accessing_solutions_programmatically/#handling-self-signed-certificates","text":"By default, SoFy generates a self-signed SSL/TLS certificate for each solution. For production use, it is recommended that you override this with a certificate generated for your own domain name. In development, you may choose to operate with the provided certificate. In Java applications, one approach to self-signed certificates is to override the default trust manager with one that does not validate certificate chains: ``` import java.net.http.HttpClient; import java.security.GeneralSecurityException; import java.security.cert.X509Certificate; import javax.net.ssl.SSLContext; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; ... // Create a trust manager that does not validate certificate chains TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() { public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } public void checkClientTrusted( java.security.cert.X509Certificate[] certs, String authType) { } public void checkServerTrusted( java.security.cert.X509Certificate[] certs, String authType) { } } }; // Create the all-trusting trust manager SSLContext sc = null; try { sc = SSLContext.getInstance(\"SSL\"); sc.init(null, trustAllCerts, new java.security.SecureRandom()); } catch (GeneralSecurityException e) { } // Also need to tell the client to not compare request host names with the certificate content final Properties props = System.getProperties(); props.setProperty(\"jdk.internal.httpclient.disableHostnameVerification\", Boolean.TRUE.toString()); // set the all-trusting trust manager on the client builder HttpClient.Builder builder = HttpClient.newBuilder(); builder.sslContext(sc); // Create HTTP Client to send requests to solution services HttpClient sol_client = builder .version(Version.HTTP_1_1) .build(); ## Authenticate to Obtain a JSON Web Token (JWT) If the Access Control Service (ACS) is included in the solution, you first need to authenticate to ACS and then receive a JWT to include on any subsequent API call. Authentication is achieved through a GET request to the *h<span>ttps://sofy-auth.{external.ip}.nip.io/login* endpoint using the HTTP Basic authentication protocol. There are two User IDs (userids) that are created for every solution and you can add more User IDs if you wish. | Userid | Default password | Access | | ----------- | ----------- | ----------- | | user | pass | catalog services | | sol-admin | pass | all services (including Solution Console)| To access Solution Console, use the *sol-admin* administrator id. The User ID (userid) and password must be Base64 encoded and included in the **Authorization** HTTP header, as shown in the example below: String idpw = \"user:pass\"; String encodedString = Base64.getEncoder().encodeToString(idpw.getBytes()); // replace with your own solution's external ip address ext_ip = \"34.67.88.109.nip.io\"; HttpResponse response = null; try { String url = \"https://sofy-auth.\" + ext_ip + \"/login\"; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(url)) .GET() .timeout(Duration.ofSeconds(150)) .header(\"accept\", \"application/json\") .header(\"Authorization\", \"Basic \"+encodedString) .build(); // Send a request using the HTTPClient that was created with the all-trusting trust manager response = sol_client.send(request, BodyHandlers.ofString()); switch (response.statusCode()) { case (200): // Success - extract JWT from Auth header and save it for future requests HttpHeaders headers = response.headers(); List<String> auths = headers.allValues(\"Authorization\"); // Header requires 'Bearer' before actual token value token = \"Bearer \"+(String)response.body(); // You may want to persist the token at this point break; case (404): System.out.println(\"sofy-auth login not found, perhaps ACS not included in this solution\"); break; case (500): // Workaround: ACS may take a short time to complete initialization System.out.println(\"sofy-auth login returned 500, will retry once after a short pause\"); Thread.sleep(60000); loginToSolution(idpw, soldomain); break; default: System.out.println(\"sofy-auth login failed: \"+response.statusCode()); System.out.println(response.body()); } }catch(Exception e) { e.printStackTrace(); } The JWT will be valid for 5 minutes and then will expire, after which re-authentication will be necessary. If you wish to query the expiry time of the token, the code below shows how to do that using the Auth0 java-jwt library. import com.auth0.jwt.JWT; import com.auth0.jwt.exceptions.JWTDecodeException; import com.auth0.jwt.interfaces.DecodedJWT; ... DecodedJWT jwt = null; String jwtString = token.replace(\"Bearer \",\"\"); try { jwt = JWT.decode(jwtString); Date expiryTime = jwt.getExpiresAt(); Date now = new Date(); System.out.println(\"token expires at: \"+expiryTime); System.out.println(\"time now is: \"+now); tokenExpired = now.after(expiryTime); if (tokenExpired) System.out.println(\"Token for solution access is already expired - expect 401/403 the re-authentication\"); // Could choose to re-login here, but an unexpired token may still expire between this point and the next API call } catch (JWTDecodeException exception){ System.out.println(\"JWT decode failed for token: \"+jwtString); exception.printStackTrace(); } ## Call the Catalog Service REST API Once you have the URL for the REST method you want to call, an HTTP client that will handle self-signed certificates (unless you have applied your own domain/certificate), and the authorization token (if ACS is used in your solution), then you are ready to make a call to a catalog service REST API. There are a couple of workarounds shown in the example below, with a counter to limit the retry attempts. private static void callApi() { HttpResponse response = null; apiCallCounter++; if (apiCallCounter > apiCallRetryLimit) { System.out.println(\"Reached max attempts to call solution REST API, giving up\"); return; } boolean tokenExpired = false; try { String url = \"https://test-data-synth.\" + ext_ip + \"/datasynth/1.0/data/ccVisa?count=5\"; HttpRequest.Builder builder = HttpRequest.newBuilder(); if (acs) { builder.header(\"Authorization\", token); // be careful not to add null token (-> NPE) HttpRequest request = builder .uri(URI.create(url)) .GET() .timeout(Duration.ofSeconds(90)) .header(\"accept\", \"application/json\") .build(); response = sol_client.send(request, BodyHandlers.ofString()); switch (response.statusCode()) { case (200): System.out.println(\"tds GET returned 200\"); JSONArray testDataJson = new JSONArray((String)response.body()); System.out.println(testDataJson.toString(4)); break; case (307): System.out.println(\"*** RC 307 Redirect - suggests protected method was called without auth header data\"); break; case (401): case (403): System.out.println(\"*** Authentication/Authorization issue, RC: \"+response.statusCode()); System.out.println(\"May be token expiry, re-authenticate (once) and retry\"); // call method with login logic shown above loginToSolution(\"user:pass\", ext_ip); apiCallCounter = apiCallRetryLimit -1; callApi(); break; case (404): System.out.println(\"*** 404: tds records not found... service may not be included or not running\"); break; case (503): System.out.println(\"*** 503 returned - wait 5 seconds then try again\"); Thread.sleep(5000); callApi(); break; default: System.out.println(\"*** tds home access failed: \"+response.statusCode()); System.out.println(\"response body: \"+response.body()); System.out.println(\"response headers:: \"+response.headers()); } }catch(Exception e) { e.printStackTrace(); } } ```","title":"Handling Self-Signed Certificates"},{"location":"topics/Using%20Solutions/default_login_credentials/","text":"Default Login Credentials The products or services which are included in a solution may have default login credentials. You can find these default credentials through the following: User Documentation in the SoFy Catalog In the SoFy Catalog, click on a service or product's card to access default credentials in the user documentation. Solution Console The Solution Console is accessible once your solution has been deployed. The default login for the Solution Console is: * User: sol-admin * Password: pass Once you are logged in, you can obtain the default logins for your service or product in the Solution Console. To view the default logins, click on General Information on your service or product's card on the Dashboard. These are the default credentials and may not work if they have already been reset/changed. If you are unable to login, please contact SoFy Support.","title":"Default Credentials"},{"location":"topics/Using%20Solutions/default_login_credentials/#default-login-credentials","text":"The products or services which are included in a solution may have default login credentials. You can find these default credentials through the following:","title":"Default Login Credentials"},{"location":"topics/Using%20Solutions/default_login_credentials/#user-documentation-in-the-sofy-catalog","text":"In the SoFy Catalog, click on a service or product's card to access default credentials in the user documentation.","title":"User Documentation in the SoFy Catalog"},{"location":"topics/Using%20Solutions/default_login_credentials/#solution-console","text":"The Solution Console is accessible once your solution has been deployed. The default login for the Solution Console is: * User: sol-admin * Password: pass Once you are logged in, you can obtain the default logins for your service or product in the Solution Console. To view the default logins, click on General Information on your service or product's card on the Dashboard. These are the default credentials and may not work if they have already been reset/changed. If you are unable to login, please contact SoFy Support.","title":"Solution Console"},{"location":"topics/Using%20Solutions/managing_solution_users/","text":"Managing User Access to a Solution Access to the service endpoints in a solution is controlled by the Access Control Service (ACS). If you want to allow unrestricted access to the solution, you can exclude the ACS from your solution. If ACS is included, access to all service endpoints will be restricted to known users who must authenticate to ACS, either through an on-screen login (for browser access) or a programmatic login (for application access). When a solution is generated with ACS, a number of default users and roles are created to allow initial access and setup of the solution. If you need to change or add to the default users, this can be done after the solution has been deployed by accessing the administrative console of the included Keycloak service. Note : If ACS is off, you will be unable to add and change users, passwords, and roles in a deployed solution. Adding and Changing Users, Passwords, and Roles in a Deployed Solution Access the Keycloak service using the link from the Solution Console application: under SoFy Common Services, it is labeled User Management , or access directly by constructing the URL as follows: https://sofy-kc.{external-ip}.nip.io/auth/ Click on Administration Console and log in using the default credentials: admin:pass On the left of the screen, under Manage , select Users , and click on Add User Enter the appropriate information, at a minimum the username will be added. Click save. Move to the Credentials tab and set a temporary password. At this point, the new user will be able to log into the solution, set a new password, and access catalog services. They will not be able to access the Solution Console. Note : The user will have to set a new password in order to activate their account. If you wish to allow the new user to access the Solution Console, do the following: 1. Go to the Role Mappings tab in Keycloak 2. Select the solution-admin role and add it for that user; the change should take effect immediately","title":"Managing User Access"},{"location":"topics/Using%20Solutions/managing_solution_users/#managing-user-access-to-a-solution","text":"Access to the service endpoints in a solution is controlled by the Access Control Service (ACS). If you want to allow unrestricted access to the solution, you can exclude the ACS from your solution. If ACS is included, access to all service endpoints will be restricted to known users who must authenticate to ACS, either through an on-screen login (for browser access) or a programmatic login (for application access). When a solution is generated with ACS, a number of default users and roles are created to allow initial access and setup of the solution. If you need to change or add to the default users, this can be done after the solution has been deployed by accessing the administrative console of the included Keycloak service. Note : If ACS is off, you will be unable to add and change users, passwords, and roles in a deployed solution.","title":"Managing User Access to a Solution"},{"location":"topics/Using%20Solutions/managing_solution_users/#adding-and-changing-users-passwords-and-roles-in-a-deployed-solution","text":"Access the Keycloak service using the link from the Solution Console application: under SoFy Common Services, it is labeled User Management , or access directly by constructing the URL as follows: https://sofy-kc.{external-ip}.nip.io/auth/ Click on Administration Console and log in using the default credentials: admin:pass On the left of the screen, under Manage , select Users , and click on Add User Enter the appropriate information, at a minimum the username will be added. Click save. Move to the Credentials tab and set a temporary password. At this point, the new user will be able to log into the solution, set a new password, and access catalog services. They will not be able to access the Solution Console. Note : The user will have to set a new password in order to activate their account. If you wish to allow the new user to access the Solution Console, do the following: 1. Go to the Role Mappings tab in Keycloak 2. Select the solution-admin role and add it for that user; the change should take effect immediately","title":"Adding and Changing Users, Passwords, and Roles in a Deployed Solution"},{"location":"topics/Using%20Solutions/sofy_software_offerings/","text":"The Difference Between Products, Modules, and Demos Our SoFy Catalog contains 3 software offerings: Products are HCL cloud native product offerings Modules are HCL microservices which can be used as part of a larger solution Demos are pre-configured installations of software and other resources for demonstrating the value of HCL products From our SoFy Catalog page, you can add one or multiple products to your solution. Modules can be added to support the products in your solution. Demos act a bit differently. When you add a demo to a solution, it will automatically bundle the associated product with it \u2013 for instance, a custom theme you can install on your website with specific colors, fonts, and styling. Demos install scenarios and content into your product for you to experience them to their fullest, richest extent. The name \u201cDemos\u201d comes from their main purpose: to \u201cdemonstrate\u201d the power of HCL Software Products. ![image](https://user-images.githubusercontent.com/83314396/119736192-357da100-be32-11eb-860d-e95be231837c.png) Catalog Tips SoFy Demo Packs include all products required for the demo, so you only need to add the demo pack to your SoFy Solution. You can build a solution containing only modules. A solution containing only the demo without the coordinating product is not recommended. Demo packs are a type of integration used to quickly prepare an environment for demo use and sometimes to create integrations between products\u2014such as between HCL Commerce and HCL Digital Experience (DX). Adding several products into a solution does not automatically integrate those products with one another. Navigating the Catalog Our SoFy Catalog is listed from Products, to Modules, and then Demos, descending down the page. Use filters or key words in the search box to find the item you are looking for. Some product cards indicate a teal layers icon in the top righthand corner. This denotes an add-on demo is available for this particular product. Click on the icon to view the add-on software. When you click on a demo card from the catalog, a populated details page will tell you important information about what the demo includes.","title":"Software Offerings"},{"location":"topics/Using%20Solutions/sofy_software_offerings/#the-difference-between-products-modules-and-demos","text":"","title":"The Difference Between Products, Modules, and Demos"},{"location":"topics/Using%20Solutions/sofy_software_offerings/#our-sofy-catalog-contains-3-software-offerings","text":"Products are HCL cloud native product offerings Modules are HCL microservices which can be used as part of a larger solution Demos are pre-configured installations of software and other resources for demonstrating the value of HCL products From our SoFy Catalog page, you can add one or multiple products to your solution. Modules can be added to support the products in your solution. Demos act a bit differently. When you add a demo to a solution, it will automatically bundle the associated product with it \u2013 for instance, a custom theme you can install on your website with specific colors, fonts, and styling. Demos install scenarios and content into your product for you to experience them to their fullest, richest extent. The name \u201cDemos\u201d comes from their main purpose: to \u201cdemonstrate\u201d the power of HCL Software Products. ![image](https://user-images.githubusercontent.com/83314396/119736192-357da100-be32-11eb-860d-e95be231837c.png)","title":"Our SoFy Catalog contains 3 software offerings:"},{"location":"topics/Using%20Solutions/sofy_software_offerings/#catalog-tips","text":"SoFy Demo Packs include all products required for the demo, so you only need to add the demo pack to your SoFy Solution. You can build a solution containing only modules. A solution containing only the demo without the coordinating product is not recommended. Demo packs are a type of integration used to quickly prepare an environment for demo use and sometimes to create integrations between products\u2014such as between HCL Commerce and HCL Digital Experience (DX). Adding several products into a solution does not automatically integrate those products with one another.","title":"Catalog Tips"},{"location":"topics/Using%20Solutions/sofy_software_offerings/#navigating-the-catalog","text":"Our SoFy Catalog is listed from Products, to Modules, and then Demos, descending down the page. Use filters or key words in the search box to find the item you are looking for. Some product cards indicate a teal layers icon in the top righthand corner. This denotes an add-on demo is available for this particular product. Click on the icon to view the add-on software. When you click on a demo card from the catalog, a populated details page will tell you important information about what the demo includes.","title":"Navigating the Catalog"}]}